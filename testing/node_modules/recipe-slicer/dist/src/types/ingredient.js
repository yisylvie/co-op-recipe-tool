"use strict";
exports.__esModule = true;
exports.Ingredient = void 0;
var uuid_1 = require("uuid");
var utils_1 = require("../utils");
var Ingredient = (function () {
    function Ingredient() {
        this.amount = undefined;
        this.unit = undefined;
        this.name = '';
        this.id = (0, uuid_1.v4)();
        this.active = 'none';
        this.locked = true;
    }
    Ingredient.prototype.sort = function (current) {
        if (current.length > utils_1.MAX_WORD_LENGTH)
            throw new Error(utils_1.ERRORS.BAD_INPUT_LENGTH);
        if (this._isAmount(current)) {
            this.setAmount(current, true);
        }
        else if (this._isUnit(current)) {
            if (!this.amount) {
                throw new Error(utils_1.ERRORS.AMOUNT.HAS_DATA);
            }
            this.setUnit(current);
            if ('ml' in this.unit) {
                this.amount = this.amount * this.unit.ml.ml;
            }
        }
        else {
            if (!this.amount) {
                throw new Error(utils_1.ERRORS.UNIT.HAS_DATA);
            }
            this.setName(current, true);
        }
    };
    Ingredient.prototype.scale = function (constant) {
        if (this.locked === false) {
            return;
        }
        var amount = (constant * this.amount).toString();
        this.setNewAmount(amount);
        if (this.unit !== undefined && 'ml' in this.unit) {
            this.unit = (0, utils_1.getUnitFromMl)(this.amount);
        }
    };
    Ingredient.prototype._isAmount = function (current) {
        return (0, utils_1.isNumber)(current);
    };
    Ingredient.prototype._isUnit = function (current) {
        return Boolean((0, utils_1.getUnitFromString)(current));
    };
    Ingredient.prototype.setAmount = function (current, add) {
        if (add === void 0) { add = false; }
        var float = (0, utils_1.toNumber)(current);
        if (add && Boolean(this.amount)) {
            this.amount += float;
        }
        else {
            this.amount = float;
        }
    };
    Ingredient.prototype.setNewAmount = function (amount) {
        if (this._isAmount(amount)) {
            this.setAmount(amount, false);
        }
        else {
            throw new Error(utils_1.ERRORS.AMOUNT.INVALID);
        }
    };
    Ingredient.prototype.setNewUnlockedAmount = function (amount) {
        if (this.unit && 'ml' in this.unit) {
            this.setNewAmount("".concat((0, utils_1.toNumber)(amount) * this.unit.ml.ml));
        }
        else {
            this.setNewAmount(amount);
        }
    };
    Ingredient.prototype.setUnit = function (unit) {
        this.unit = (0, utils_1.getUnitFromString)(unit);
    };
    Ingredient.prototype.setName = function (current, concat) {
        if (concat === void 0) { concat = false; }
        if (concat && this.name !== '') {
            var newName = "".concat(this.name, " ").concat(current);
            this.name = newName;
        }
        else {
            this.name = current;
        }
    };
    Ingredient.prototype.setNewName = function (current) {
        if (current.length >= utils_1.MAX_WORD_LENGTH) {
            throw new Error(utils_1.ERRORS.BAD_WORD_LENGTH);
        }
        var name = current.replace(utils_1.REPLACE_CHAR, '');
        if (!name.length) {
            throw new Error(utils_1.ERRORS.INGREDIENT.BAD_INPUT);
        }
        this.setName(name);
    };
    Ingredient.prototype.setActive = function (state) {
        if (this.active === state)
            this.active = 'none';
        else
            this.active = state;
    };
    Ingredient.prototype.toggleLocked = function () {
        this.locked = !this.locked;
    };
    Ingredient.prototype.validate = function () {
        if (Boolean(this.name) && Boolean(this.amount)) {
            return true;
        }
        else {
            return false;
        }
    };
    Ingredient.prototype.displayAmount = function (format) {
        if (format === void 0) { format = true; }
        if (this.unit) {
            if ('ml' in this.unit) {
                return (0, utils_1.formatAmount)((0, utils_1.getAmountInUnit)(this.amount, this.unit), format);
            }
        }
        return (0, utils_1.formatAmount)(this.amount, format);
    };
    return Ingredient;
}());
exports.Ingredient = Ingredient;
//# sourceMappingURL=ingredient.js.map