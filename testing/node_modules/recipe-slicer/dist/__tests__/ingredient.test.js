"use strict";
exports.__esModule = true;
var src_1 = require("../src");
describe('Given a valid amount', function () {
    test('it sorts an integer value (1)', function () {
        var ing = new src_1.Ingredient();
        ing.sort('1');
        expect(ing.amount).toBe(1);
    });
    test('it sorts fraction value (1/2)', function () {
        var ing = new src_1.Ingredient();
        ing.sort('1/2');
        expect(ing.amount).toBe(0.5);
    });
    test('it sorts float value (1.5)', function () {
        var ing = new src_1.Ingredient();
        ing.sort('1.5');
        expect(ing.amount).toBe(1.5);
    });
    test('it sums repeated input', function () {
        var ing = new src_1.Ingredient();
        ing.sort('1');
        ing.sort('1/2');
        ing.sort('1.5');
        expect(ing.amount).toBe(3);
    });
    test('it replaces input when replace arg is false', function () {
        var ing = new src_1.Ingredient();
        ing.sort('1');
        expect(ing.amount).toBe(1);
        ing.setAmount('5', false);
        expect(ing.amount).toBe(5);
    });
    test('it toggles locked state', function () {
        var ing = new src_1.Ingredient();
        expect(ing.locked).toBe(true);
        ing.toggleLocked();
        expect(ing.locked).toBe(false);
        ing.toggleLocked();
        expect(ing.locked).toBe(true);
    });
});
describe('Given a valid unit string as input', function () {
    var ing = new src_1.Ingredient();
    ing.sort('1');
    ing.sort('tsp');
    test("it sets the ingredient's unit to the correct unit", function () {
        expect(ing.unit).toMatchObject(src_1.UNITS.TEASPOON);
    });
});
describe('Given a string as ingredient name', function () {
    var ing = new src_1.Ingredient();
    ing.sort('1');
    ing.sort('salt');
    test('it set string input that is not an amount or unit as ingredient name', function () {
        expect(ing.name).toBe('salt');
    });
    test('it concatinates with spaces if ingredient name is already present', function () {
        ing.sort('and');
        ing.sort('pepper');
        expect(ing.name).toBe('salt and pepper');
    });
    test('it replaces input when replace arg is false', function () {
        var newIng = 'butter';
        ing.setName(newIng, false);
        expect(ing.name).toBe(newIng);
    });
});
describe('Given a valid amount, unit, and ingredient name', function () {
    var ing = new src_1.Ingredient();
    ing.sort('1');
    ing.sort('cup');
    ing.sort('water');
    test('it is a valid ingredient', function () {
        expect(ing.validate()).toBe(true);
    });
    test('it sorts and sets ingredient parts correctly', function () {
        expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(1);
        expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
        expect(ing.name).toBe('water');
    });
    test('it returns the correct display object', function () {
        var amount = ing.displayAmount();
        expect(amount).toBe('1');
    });
});
describe('Given a string to replace a field in the recipe', function () {
    var ing = new src_1.Ingredient();
    ing.sort('1');
    ing.sort('cup');
    ing.sort('oldname');
    test('it changes ingredient name', function () {
        var NEW_NAME = 'newname';
        ing.setNewName(NEW_NAME);
        expect(ing.name).toBe(NEW_NAME);
    });
});
//# sourceMappingURL=ingredient.test.js.map