"use strict";
exports.__esModule = true;
var src_1 = require("../src");
describe('Given an amount in ml', function () {
    test('it returns the a valid unit when it is not too high', function () {
        var unit10 = (0, src_1.getUnitFromMl)(10, true);
        var unit100 = (0, src_1.getUnitFromMl)(100, true);
        var unit1000 = (0, src_1.getUnitFromMl)(1000, true);
        var unit10000 = (0, src_1.getUnitFromMl)(10000, true);
        expect(unit10).toBeTruthy();
        expect(unit10.name).toBeTruthy();
        expect(unit100).toBeTruthy();
        expect(unit100.name).toBeTruthy();
        expect(unit1000).toBeTruthy();
        expect(unit1000.name).toBeTruthy();
        expect(unit10000).toBeTruthy();
        expect(unit10000.name).toBeTruthy();
    });
    test('it throws when input is too high', function () {
        expect(function () { return (0, src_1.getUnitFromMl)(9999999, true); }).toThrow(src_1.ERRORS.UNIT.UNREALISTIC_INPUT);
    });
    test('it throws when input is negative', function () {
        expect(function () { return (0, src_1.getUnitFromMl)(-1, true); }).toThrow(src_1.ERRORS.AMOUNT.NEGATIVE_INPUT);
    });
});
describe('Given an amount in ml with standard units only', function () {
    test('it returns TEASPOON for 10ml input', function () {
        expect((0, src_1.getUnitFromMl)(10, true)).toMatchObject(src_1.UNITS.TABLESPOON);
    });
    test('it returns TABLESPOON for 20ml input', function () {
        expect((0, src_1.getUnitFromMl)(20, true)).toMatchObject(src_1.UNITS.TABLESPOON);
    });
    test('it returns TABLESPOON for 50ml input', function () {
        expect((0, src_1.getUnitFromMl)(50, true)).toMatchObject(src_1.UNITS.TABLESPOON);
    });
    test('it returns TABLESPOON for 100ml input', function () {
        expect((0, src_1.getUnitFromMl)(100, true)).toMatchObject(src_1.UNITS.CUP);
    });
    test('it returns CUP for 500ml input', function () {
        expect((0, src_1.getUnitFromMl)(500, true)).toMatchObject(src_1.UNITS.CUP);
    });
    test('it returns GALLON for 10000ml (max) input', function () {
        expect((0, src_1.getUnitFromMl)(1000, true)).toMatchObject(src_1.UNITS.GALLON);
    });
});
describe('Given an amount in ml with all units included', function () {
    test('it returns TABLESPOON for 10ml input', function () {
        expect((0, src_1.getUnitFromMl)(10, false)).toMatchObject(src_1.UNITS.TABLESPOON);
    });
    test('it returns OUNCE for 20ml input', function () {
        expect((0, src_1.getUnitFromMl)(20, false)).toMatchObject(src_1.UNITS.OUNCE);
    });
    test('it returns CUP for 100ml input', function () {
        expect((0, src_1.getUnitFromMl)(100, false)).toMatchObject(src_1.UNITS.CUP);
    });
    test('it returns PINT for 500ml input', function () {
        expect((0, src_1.getUnitFromMl)(500, false)).toMatchObject(src_1.UNITS.PINT);
    });
    test('it returns QUART for 1000ml input', function () {
        expect((0, src_1.getUnitFromMl)(1000, false)).toMatchObject(src_1.UNITS.QUART);
    });
});
//# sourceMappingURL=unit.test.js.map