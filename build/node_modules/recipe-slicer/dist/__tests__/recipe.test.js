"use strict";
exports.__esModule = true;
var src_1 = require("../src");
var utils_1 = require("./utils");
var NO_UNITS = "\n1 ingredient name\n0.5 ingredient name\n0.25 ingredient name\n2 ingredient name\n";
var SLICED = "1/2 cup butter \n0.75 c sugar \n3 large eggs \n3 tbsps lemon juice \n1 c plain flour \n2 tsp baking powder \n1 cup ricotta 1/4 c milk";
describe('Given an recipe with no units', function () {
    var recipe = new src_1.Recipe();
    test('it parses the string and returns an array of ingredients', function () {
        recipe.set(NO_UNITS);
        expect(recipe.input).toBe(NO_UNITS);
        expect(recipe.ingredients).toBeDefined();
        expect(recipe.ingredients.length).toBe(4);
    });
    test('it scales a recipe by a constant', function () {
        var CONSTANT = 2;
        recipe.scale(CONSTANT);
        expect(recipe.constant).toBe(CONSTANT);
        expect(recipe.ingredients).toBeTruthy();
        expect(recipe.ingredients[0].amount).toBe(2);
        expect(recipe.ingredients[1].amount).toBe(1);
        expect(recipe.ingredients[2].amount).toBe(0.5);
        expect(recipe.ingredients[3].amount).toBe(4);
    });
    test('it excludes unlocked ingredients from scaling', function () {
        recipe.ingredients[0].toggleLocked();
        recipe.scale(0.5);
        expect(recipe.ingredients[0].amount).toBe(2);
        expect(recipe.ingredients[1].amount).toBe(0.5);
        expect(recipe.ingredients[2].amount).toBe(0.25);
        expect(recipe.ingredients[3].amount).toBe(2);
    });
});
describe('Given the sample recipe from Sliced web app and a constant of 2', function () {
    var recipe = new src_1.Recipe();
    recipe.set(SLICED);
    test('it sets ingredients as an array of the correct length', function () {
        expect(recipe.ingredients.length).toBe(8);
    });
    describe('Before constant is set', function () {
        test('it parses the first ingredient correctly', function () {
            var ing = recipe.ingredients[0];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(0.5);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('butter');
        });
        test('it parses the second ingredient correctly', function () {
            var ing = recipe.ingredients[1];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(0.75);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('sugar');
        });
        test('it parses the third ingredient correctly', function () {
            var ing = recipe.ingredients[2];
            expect(ing.amount).toBe(3);
            expect(ing.unit).toBeUndefined();
            expect(ing.name).toBe('large eggs');
        });
        test('it parses the fourth ingredient correctly', function () {
            var ing = recipe.ingredients[3];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(3);
            expect(ing.unit).toMatchObject(src_1.UNITS.TABLESPOON);
            expect(ing.name).toBe('lemon juice');
        });
        test('it parses the fifth ingredient correctly', function () {
            var ing = recipe.ingredients[4];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(1);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('plain flour');
        });
        test('it parses the sixth ingredient correctly', function () {
            var ing = recipe.ingredients[5];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(2);
            expect(ing.unit).toMatchObject(src_1.UNITS.TEASPOON);
            expect(ing.name).toBe('baking powder');
        });
        test('it parses the seventh ingredient correctly', function () {
            var ing = recipe.ingredients[6];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(1);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('ricotta');
        });
        test('it parses the final ingredient correctly', function () {
            var ing = recipe.ingredients[7];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(0.25);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('milk');
        });
    });
    describe('After constant is set to 2', function () {
        var CONSTANT = 2;
        test('it scales a recipe by a constant', function () {
            recipe.scale(CONSTANT);
            expect(recipe.constant).toBe(CONSTANT);
            expect(recipe.ingredients).toBeTruthy();
        });
        test('it scales the first ingredient correctly', function () {
            var ing = recipe.ingredients[0];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(0.5 * CONSTANT);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('butter');
        });
        test('it scales the second ingredient correctly', function () {
            var ing = recipe.ingredients[1];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(0.75 * CONSTANT);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('sugar');
        });
        test('it scales the third ingredient correctly', function () {
            var ing = recipe.ingredients[2];
            expect(ing.amount).toBe(3 * CONSTANT);
            expect(ing.unit).toBeUndefined();
            expect(ing.name).toBe('large eggs');
        });
        test('it scales the fourth ingredient correctly', function () {
            var ing = recipe.ingredients[3];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(0.38);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('lemon juice');
        });
        test('it scales the fifth ingredient correctly', function () {
            var ing = recipe.ingredients[4];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(1 * CONSTANT);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('plain flour');
        });
        test('it scales the sixth ingredient correctly', function () {
            var ing = recipe.ingredients[5];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(1.33);
            expect(ing.unit).toMatchObject(src_1.UNITS.TABLESPOON);
            expect(ing.name).toBe('baking powder');
        });
        test('it scales the seventh ingredient correctly', function () {
            var ing = recipe.ingredients[6];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(1 * CONSTANT);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('ricotta');
        });
        test('it scales the final ingredient correctly', function () {
            var ing = recipe.ingredients[7];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(0.25 * CONSTANT);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('milk');
        });
    });
    describe('After constant is set to 0.5', function () {
        var CONSTANT = 0.5;
        test('it scales a recipe by a constant', function () {
            recipe.scale(CONSTANT);
            expect(recipe.constant).toBe(CONSTANT);
            expect(recipe.ingredients).toBeTruthy();
        });
        test('it scales the first ingredient correctly', function () {
            var ing = recipe.ingredients[0];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(0.5);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('butter');
        });
        test('it scales the second ingredient correctly', function () {
            var ing = recipe.ingredients[1];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(0.75);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('sugar');
        });
        test('it scales the third ingredient correctly', function () {
            var ing = recipe.ingredients[2];
            expect(ing.amount).toBe(3);
            expect(ing.unit).toBeUndefined();
            expect(ing.name).toBe('large eggs');
        });
        test('it scales the fourth ingredient correctly', function () {
            var ing = recipe.ingredients[3];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(3);
            expect(ing.unit).toMatchObject(src_1.UNITS.TABLESPOON);
            expect(ing.name).toBe('lemon juice');
        });
        test('it scales the fifth ingredient correctly', function () {
            var ing = recipe.ingredients[4];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(1);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('plain flour');
        });
        test('it scales the sixth ingredient correctly', function () {
            var ing = recipe.ingredients[5];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(0.67);
            expect(ing.unit).toMatchObject(src_1.UNITS.TABLESPOON);
            expect(ing.name).toBe('baking powder');
        });
        test('it scales the seventh ingredient correctly', function () {
            var ing = recipe.ingredients[6];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(1);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('ricotta');
        });
        test('it scales the final ingredient correctly', function () {
            var ing = recipe.ingredients[7];
            expect((0, src_1.getAmountInUnit)(ing.amount, ing.unit)).toBe(0.25);
            expect(ing.unit).toMatchObject(src_1.UNITS.CUP);
            expect(ing.name).toBe('milk');
        });
    });
});
describe('Given input that exceeds the maximum length', function () {
    test('it throws a BAD_INPUT_LENGTH error', function () {
        var recipe = new src_1.Recipe();
        expect(function () { return recipe.set(utils_1.LONG_INPUT); }).toThrow(src_1.ERRORS.BAD_INPUT_LENGTH);
    });
});
//# sourceMappingURL=recipe.test.js.map