"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.Recipe = void 0;
var utils_1 = require("../utils");
var string_1 = require("../utils/string");
var Recipe = (function () {
    function Recipe() {
        this.ingredients = [];
        this.constant = 1;
        this.standardUnitsOnly = true;
    }
    Recipe.prototype.set = function (input) {
        try {
            var inputArr = (0, string_1.splitInput)(input);
            if (inputArr.length > utils_1.MAX_INPUT_LENGTH) {
                throw new Error(utils_1.ERRORS.BAD_INPUT_LENGTH);
            }
            if (input !== this.input) {
                var ingredients = (0, utils_1.makeIngredientArray)(inputArr);
                this.input = input;
                this.ingredients = ingredients;
            }
        }
        catch (error) {
            throw new Error("CATCHING FROM RECIPE.SET".concat(utils_1.ERRORS.BAD_INPUT, ": ").concat(error === null || error === void 0 ? void 0 : error.message));
        }
    };
    Recipe.prototype.scale = function (constant) {
        var _this = this;
        var rollback = {
            ingredients: __spreadArray([], this.ingredients, true),
            constant: this.constant
        };
        try {
            this.ingredients.forEach(function (_, index) {
                _this.ingredients[index].scale(constant);
            });
            this.constant = constant;
        }
        catch (error) {
            this.ingredients = rollback.ingredients;
            this.constant = rollback.constant;
            throw new Error("".concat(utils_1.ERRORS.RECIPE_NOT_SCALED, ": ").concat(error === null || error === void 0 ? void 0 : error.message));
        }
    };
    return Recipe;
}());
exports.Recipe = Recipe;
//# sourceMappingURL=recipe.js.map