"use strict";
exports.__esModule = true;
exports.getAmountInUnit = exports.getDisplayAmount = exports.getUnitFromString = exports.getUnitFromMl = void 0;
var types_1 = require("../types");
var constants_1 = require("./constants");
var errors_1 = require("./errors");
function getUnitFromMl(amount, standard) {
    if (standard === void 0) { standard = true; }
    if (amount === 0) {
        throw Error(errors_1.ERRORS.AMOUNT.ZERO_INPUT);
    }
    if (amount > constants_1.MAX_SUPPORTED_ML) {
        throw Error(errors_1.ERRORS.UNIT.UNREALISTIC_INPUT);
    }
    if (amount < 0) {
        throw Error(errors_1.ERRORS.AMOUNT.NEGATIVE_INPUT);
    }
    var units = Object.values(types_1.UNITS).filter(function (unit) {
        return (unit === null || unit === void 0 ? void 0 : unit.ml) && standard
            ? Boolean('standard' in unit.ml)
            : (unit === null || unit === void 0 ? void 0 : unit.ml)
                ? true
                : false;
    });
    var unit = units.find(function (unit) {
        var min = getBreakpoint(unit, standard).min;
        if (amount >= min)
            return true;
    });
    if (!unit) {
        throw new Error(errors_1.ERRORS.UNIT.NO_UNIT);
    }
    return unit;
}
exports.getUnitFromMl = getUnitFromMl;
function getUnitFromString(input) {
    var compare = input.length > 1 ? input.toLowerCase() : input;
    for (var _i = 0, _a = Object.values(types_1.UNITS); _i < _a.length; _i++) {
        var unit = _a[_i];
        var matches = unit.matchString;
        var compareval = matches.has(compare.toString());
        if (compareval) {
            return unit;
        }
    }
}
exports.getUnitFromString = getUnitFromString;
function getBreakpoint(_a, standard) {
    var ml = _a.ml;
    if (standard === void 0) { standard = true; }
    var breakpoints = { min: ml.min };
    if (standard && 'standard' in ml) {
        if ('min' in ml.standard)
            breakpoints.min = ml.standard.min;
    }
    return breakpoints;
}
function getDisplayAmount(amount, unit) {
    if (!unit || !('ml' in unit)) {
        return amount.toString();
    }
    return getAmountInUnit(amount, unit).toString();
}
exports.getDisplayAmount = getDisplayAmount;
function getAmountInUnit(amount, _a) {
    var ml = _a.ml;
    return Number(parseFloat("".concat(amount / ml.ml)).toFixed(2));
}
exports.getAmountInUnit = getAmountInUnit;
//# sourceMappingURL=unit.js.map